---
kind: pipeline
type: kubernetes
name: matrix-1

platform:
  os: linux
  arch: amd64

steps:
- name: synch_dev_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: DEV_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: DEV_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: dev
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - secrets

- name: synch_staging_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: STAGING_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: STAGING_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: staging
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - secrets

- name: synch_production_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: PRODUCTION_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: PRODUCTION_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: production
    DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_V1_PUBLIC_TOKEN
    DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
  when:
    event:
    - promote
    target:
    - secrets


- name: build
  pull: always
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
  commands:
  - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
  - docker build -t docker-matomo:$${DRONE_COMMIT_SHA} .
  when:
    event:
    - push


- name: vulnerability-scan
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  environment:
    DOCKERFILE: Dockerfile
    IMAGE_NAME: docker-matomo:${DRONE_COMMIT_SHA}
    LOCAL_IMAGE: true
    TOLERATE: low
    WHITELIST_FILE: whitelist
  when:
    branch:
    - master
    event:
    - push

- name: image_to_quay
  image: plugins/docker
  settings:
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/docker-matomo
    tags: ${DRONE_COMMIT_SHA}
  environment:
    DOCKER_PASSWORD:
      from_secret: QUAY_PASSWORD
    DOCKER_USERNAME:
      from_secret: QUAY_USERNAME
  when:
    branch:
    - master
    event:
    - push

- name: deploy_to_dev
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export MATOMO_TAG=$${DRONE_COMMIT_SHA}
  - kd --insecure-skip-tls-verify -f kube/pvc.yml
  - kd --insecure-skip-tls-verify -f kube/cert.yml
  - kd --insecure-skip-tls-verify -f kube/secret.yml
  - kd --insecure-skip-tls-verify -f kube/service.yml
  - kd --insecure-skip-tls-verify -f kube/network-policy.yml
  - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
  - kd --insecure-skip-tls-verify -f kube/ingress.yml
  environment:
    HOSTNAME:
      from_secret: DEV_MATOMO_HOSTNAME
    KUBE_NAMESPACE:
      from_secret: DEV_KUBE_NAMESPACE_COP_OPS
    KUBE_SERVER:
      from_secret: DEV_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: DEV_KUBE_TOKEN
    MATOMO_EMAIL_PASSWORD:
      from_secret: DEV_MATOMO_EMAIL_PASSWORD
    MATOMO_EMAIL_USER:
      from_secret: DEV_MATOMO_EMAIL_USER
    MATOMO_IMAGE:
      from_secret: DEV_MATOMO_IMAGE
    MATOMO_MYSQL_DBNAME:
      from_secret: DEV_MATOMO_MYSQL_DBNAME
    MATOMO_MYSQL_HOST:
      from_secret: DEV_MATOMO_MYSQL_HOST
    MATOMO_MYSQL_PASSWORD:
      from_secret: DEV_MATOMO_MYSQL_PASSWORD
    MATOMO_MYSQL_PORT:
      from_secret: DEV_MATOMO_MYSQL_PORT
    MATOMO_MYSQL_TBL_PREFIX:
      from_secret: DEV_MATOMO_MYSQL_TBL_PREFIX
    MATOMO_MYSQL_USER:
      from_secret: DEV_MATOMO_MYSQL_USER
    MATOMO_NAME:
      from_secret: DEV_MATOMO_NAME
    MATOMO_PORT:
      from_secret: DEV_MATOMO_PORT
    MATOMO_SALT:
      from_secret: DEV_MATOMO_SALT
    MATOMO_SD_DATA_VOLUME_SIZE:
      from_secret: DEV_MATOMO_SD_DATA_VOLUME_SIZE
    MATOMO_STORAGE_CLASS:
      from_secret: DEV_MATOMO_STORAGE_CLASS
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    WWW_URL:
      from_secret: DEV_WWW_URL
  when:
    branch:
    - master
    event:
    - push

- name: deploy_to_staging
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export MATOMO_TAG=$${DRONE_COMMIT_SHA}
  - kd --insecure-skip-tls-verify -f kube/pvc.yml
  - kd --insecure-skip-tls-verify -f kube/cert.yml
  - kd --insecure-skip-tls-verify -f kube/secret.yml
  - kd --insecure-skip-tls-verify -f kube/service.yml
  - kd --insecure-skip-tls-verify -f kube/network-policy.yml
  - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
  - kd --insecure-skip-tls-verify -f kube/ingress.yml
  environment:
    HOSTNAME:
      from_secret: STAGING_MATOMO_HOSTNAME
    KUBE_NAMESPACE:
      from_secret: STAGING_KUBE_NAMESPACE_COP_OPS
    KUBE_SERVER:
      from_secret: STAGING_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: STAGING_KUBE_TOKEN
    MATOMO_EMAIL_PASSWORD:
      from_secret: STAGING_MATOMO_EMAIL_PASSWORD
    MATOMO_EMAIL_USER:
      from_secret: STAGING_MATOMO_EMAIL_USER
    MATOMO_IMAGE:
      from_secret: STAGING_MATOMO_IMAGE
    MATOMO_MYSQL_DBNAME:
      from_secret: STAGING_MATOMO_MYSQL_DBNAME
    MATOMO_MYSQL_HOST:
      from_secret: STAGING_MATOMO_MYSQL_HOST
    MATOMO_MYSQL_PASSWORD:
      from_secret: STAGING_MATOMO_MYSQL_PASSWORD
    MATOMO_MYSQL_PORT:
      from_secret: STAGING_MATOMO_MYSQL_PORT
    MATOMO_MYSQL_TBL_PREFIX:
      from_secret: STAGING_MATOMO_MYSQL_TBL_PREFIX
    MATOMO_MYSQL_USER:
      from_secret: STAGING_MATOMO_MYSQL_USER
    MATOMO_NAME:
      from_secret: STAGING_MATOMO_NAME
    MATOMO_PORT:
      from_secret: STAGING_MATOMO_PORT
    MATOMO_SALT:
      from_secret: STAGING_MATOMO_SALT
    MATOMO_SD_DATA_VOLUME_SIZE:
      from_secret: STAGING_MATOMO_SD_DATA_VOLUME_SIZE
    MATOMO_STORAGE_CLASS:
      from_secret: STAGING_MATOMO_STORAGE_CLASS
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    WWW_URL:
      from_secret: STAGING_WWW_URL
  when:
    event:
    - promote
    target:
    - staging

- name: deploy_to_production
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export MATOMO_TAG=$${DRONE_COMMIT_SHA}
  - kd --insecure-skip-tls-verify -f kube/pvc.yml
  - kd --insecure-skip-tls-verify -f kube/cert.yml
  - kd --insecure-skip-tls-verify -f kube/secret.yml
  - kd --insecure-skip-tls-verify -f kube/service.yml
  - kd --insecure-skip-tls-verify -f kube/network-policy.yml
  - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
  - kd --insecure-skip-tls-verify -f kube/ingress.yml
  environment:
    HOSTNAME:
      from_secret: PRODUCTION_MATOMO_HOSTNAME
    KUBE_NAMESPACE:
      from_secret: PRODUCTION_KUBE_NAMESPACE_COP_OPS
    KUBE_SERVER:
      from_secret: PRODUCTION_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: PRODUCTION_KUBE_TOKEN
    MATOMO_EMAIL_PASSWORD:
      from_secret: PRODUCTION_MATOMO_EMAIL_PASSWORD
    MATOMO_EMAIL_USER:
      from_secret: PRODUCTION_MATOMO_EMAIL_USER
    MATOMO_IMAGE:
      from_secret: PRODUCTION_MATOMO_IMAGE
    MATOMO_MYSQL_DBNAME:
      from_secret: PRODUCTION_MATOMO_MYSQL_DBNAME
    MATOMO_MYSQL_HOST:
      from_secret: PRODUCTION_MATOMO_MYSQL_HOST
    MATOMO_MYSQL_PASSWORD:
      from_secret: PRODUCTION_MATOMO_MYSQL_PASSWORD
    MATOMO_MYSQL_PORT:
      from_secret: PRODUCTION_MATOMO_MYSQL_PORT
    MATOMO_MYSQL_TBL_PREFIX:
      from_secret: PRODUCTION_MATOMO_MYSQL_TBL_PREFIX
    MATOMO_MYSQL_USER:
      from_secret: PRODUCTION_MATOMO_MYSQL_USER
    MATOMO_NAME:
      from_secret: PRODUCTION_MATOMO_NAME
    MATOMO_PORT:
      from_secret: PRODUCTION_MATOMO_PORT
    MATOMO_SALT:
      from_secret: PRODUCTION_MATOMO_SALT
    MATOMO_SD_DATA_VOLUME_SIZE:
      from_secret: PRODUCTION_MATOMO_SD_DATA_VOLUME_SIZE
    MATOMO_STORAGE_CLASS:
      from_secret: PRODUCTION_MATOMO_STORAGE_CLASS
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    WWW_URL:
      from_secret: PRODUCTION_WWW_URL
  when:
    event:
    - promote
    target:
    - production

- name: notify
  pull: if-not-exists
  image: plugins/slack
  settings:
    channel: cop-deployments
    template: "{{#build.deployTo}}\n  *{{repo.name}} - Build {{build.number}} - {{uppercasefirst build.deployTo}} - {{uppercase build.status}}*\n  {{build.link}}\n{{else}}\n  *{{repo.name}} - Build {{build.number}} - Development - {{uppercase build.status}}*\n  {{build.link}}\n{{/build.deployTo}}\n"
    username: Drone Build Watcher
  environment:
    SLACK_WEBHOOK:
      from_secret: SLACK_WEBHOOK
  when:
    branch:
    - master
    event:
    - push
    - promote
    status:
    - success
    - failure
    

services:
- name: docker
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

- name: anchore-submission-server
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/anchore-submission:latest
  pull: always
  commands:
    - /run.sh server

...
